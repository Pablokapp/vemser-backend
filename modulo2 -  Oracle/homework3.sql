-- RIGHT OUTER JOIN entre tabelas
-- 1 - Pessoas e contato
SELECT p.NOME, c.ID_PESSOA FROM PESSOA p LEFT OUTER JOIN CONTATO c ON (p.ID_PESSOA  = c.ID_PESSOA);

-- 2 - Pessoa, PESSOA_X_PESSOA_ENDERECO e Endereco_Pessoa
SELECT p.NOME, pxpe.ID_PESSOA, ep.ID_ENDERECO  FROM PESSOA p RIGHT OUTER JOIN PESSOA_X_PESSOA_ENDERECO pxpe 
 ON (p.ID_PESSOA  = pxpe.ID_PESSOA) RIGHT OUTER JOIN ENDERECO_PESSOA ep ON (p.ID_PESSOA = ep.ID_ENDERECO);
 
SELECT p.NOME, ep.LOGRADOURO, ep.NUMERO FROM PESSOA p 
	INNER JOIN PESSOA_X_PESSOA_ENDERECO pxpe ON (p.ID_PESSOA = PXPE.ID_PESSOA)
	INNER JOIN ENDERECO_PESSOA ep ON (PXPE.ID_ENDERECO = EP.ID_ENDERECO);
	
-- 3 - Todas as tabelas (começando por pessoa)
SELECT * FROM PESSOA_X_PESSOA_ENDERECO pxpe	 RIGHT JOIN ENDERECO_PESSOA ep 
ON pxpe.ID_ENDERECO = ep.ID_ENDERECO RIGHT JOIN PESSOA p ON (pxpe.ID_PESSOA = p.ID_PESSOA);


-- Fazer um OUTER FULL JOIN entre tabelas

 -- 4 - PESSOA e CONTATO 
SELECT * FROM PESSOA p FULL OUTER JOIN CONTATO c ON (P.ID_PESSOA = C.ID_PESSOA);

-- 5 - Pessoa, PESSOA_X_PESSOA_ENDERECO e Endereco_Pessoa
SELECT * FROM PESSOA p FULL OUTER JOIN PESSOA_X_PESSOA_ENDERECO pxpe 
ON (P.ID_PESSOA = PXPE.ID_PESSOA) FULL OUTER JOIN ENDERECO_PESSOA ep ON(PXPE.ID_ENDERECO = EP.ID_ENDERECO);

-- 6 - Todas as tabelas (começando por pessoa)
SELECT * FROM PESSOA p FULL JOIN CONTATO c
ON (p.ID_PESSOA = c.ID_PESSOA) FULL OUTER JOIN PESSOA_X_PESSOA_ENDERECO pxpe 
ON (c.ID_PESSOA = pxpe.ID_PESSOA)
FULL OUTER JOIN ENDERECO_PESSOA ep ON (pxpe.ID_ENDERECO = ep.ID_ENDERECO);

-- 7 - Utilizando o EXISTS, selecione as pessoas que tem endereço
SELECT P.ID_PESSOA, P.NOME, P.DATA_NASCIMENTO, P.CPF FROM PESSOA p WHERE EXISTS (
	SELECT * FROM PESSOA_X_PESSOA_ENDERECO pxpe WHERE P.ID_PESSOA = PXPE.ID_PESSOA
);



-- Homework #2
-- scripts de criação das tabelas

CREATE TABLE RECEITA (
	ID_RECEITA 		NUMBER (38,0) PRIMARY KEY NOT NULL
	,NOME_RECEITA 	VARCHAR2(100) NOT NULL
	,TIPO_RECEITA 	VARCHAR2 (40) NOT NULL
	,CALORIAS 		NUMBER (5,0) NOT NULL
	,MODO_PREPARO 	VARCHAR (2000) NOT NULL
	,TEMPO_PREPARO	NUMBER (5,0) NOT NULL
	,MEDIA_PRECO		NUMBER (10,2) NOT NULL
	,TIPO_REFEICAO	VARCHAR2(40) NOT NULL
)

CREATE TABLE INGREDIENTE (
	ID_INGREDIENTE 	NUMBER (38,0) PRIMARY KEY NOT NULL
	,ID_RECEITA 		NUMBER (38,0) NOT NULL
	,NOME 			VARCHAR2(100) NOT NULL
	,QUANTIDADE		NUMBER(4,0) NOT NULL
	,UNIDADE_MEDIDA	CHAR(2) NOT NULL
	,CONSTRAINT FK_ING_RECEITA_CID_RECEITA FOREIGN KEY (ID_RECEITA) REFERENCES RECEITA (ID_RECEITA)
)

-- Criar sequences para cada chave primária da tabela
CREATE SEQUENCE SEQ_RECEITA
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

CREATE SEQUENCE SEQ_INGREDIENTE
START WITH 1
INCREMENT BY 1
NOCACHE NOCYCLE;

-- Criar script de insert para as tabelas do trabalho
INSERT INTO RECEITA 
(ID_RECEITA, NOME_RECEITA, TIPO_RECEITA, CALORIAS, MODO_PREPARO, TEMPO_PREPARO, MEDIA_PRECO, TIPO_REFEICAO) 
VALUES (SEQ_RECEITA.nextval, 'Torrada', 'SALGADA', 972, 'PÃO RECHEIO E OUTRO PÃO', 10, 5.0, 'LANCHE')

INSERT INTO RECEITA 
(ID_RECEITA, NOME_RECEITA, TIPO_RECEITA, CALORIAS, MODO_PREPARO, TEMPO_PREPARO, MEDIA_PRECO, TIPO_REFEICAO)
VALUES (SEQ_RECEITA.nextval, 'MASSA COM SALSICHA', 'SALGADA', 700, 'COZINHAR A MASSA E COLOCAR SALSICHA', 12, 9.5, 'ALMOÇO')

INSERT INTO INGREDIENTE (ID_INGREDIENTE, ID_RECEITA, NOME, QUANTIDADE, UNIDADE_MEDIDA)
VALUES (SEQ_INGREDIENTE.nextval, 1, 'PÃO', 2, 'un');

INSERT INTO INGREDIENTE (ID_INGREDIENTE, ID_RECEITA, NOME, QUANTIDADE, UNIDADE_MEDIDA)
VALUES (SEQ_INGREDIENTE.nextval, 1, 'OVO', 2, 'un');

